ARCHITECTURE - Server

Server - Spawns up global stuff for inter-server comms, profile loading etc. All connections use same form and 
must send a "heartbeat" to keep alive and ensure no idle sessions - they will be killed...?

IMPORTANT: HOW do threads happen?


Server sees incoming connection - initial few bytes indicate type: 

STREAM/UPDATE - Anonymous requests for free data
		Statuses:
			Idle
			Active
			
LOGIN/GAME - sets connection (session) up for authorised actions then performs them.
		Statuses for one of these:
			EncryptionEstablishing/Login <--CONNECTION established and secured.
			Lobby <--PROFILE loaded
			Loadup <-PLAYER created from PROFILE, ENGINE (WORLD, UNITS,MANAGERS) spawned, client data loaded.
			Ingame

NOTE:
A PROFILE can be anywhere - but a PLAYER is spawned from a PROFILE.
PROFILE handles global stats, money etc. 
PLAYER only handles that specific GAME's stuff (TEAM, TYPE, Cred, UNITS).



For GAME DEVELOPMENT only - can this be on a production server?!:

STREAM/UPDATE is more active (different type?) 
The server can now PUSH data to the client into temp cache (sprites, units, music etc).

LOGIN/GAME can update the WORLD object and TERRAIN now as well - additional packets used. 

TODO ALSO perhaps make threadpool rather than 1 thread/conneciton - for speed. s

FOR NOW data is stored locally, and updates can be triggered through a client-like program:
Server can receive unconventional connections from selected other IPs

ADMIN - trigger features like maintenance mode.
DATABACKUP/OFFLINE/EMERGENCY?

Ideally this would be done on the server connecting to another machine, not vice versa... For expansion/Decentral